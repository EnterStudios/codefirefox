All videos show screen with a small vm that has a smaller resolution
i will ensure everyting is really visible and easy to read.

Goal: Have a single unified place that teaches others how to contribute to
Firefox from knowing nothing, step by step, in great detail, with videos.

0. Setting up a build environment from a brand new Windows installation
  0.0 Downloading VS 2012 Express
  0.1 Installing Visual Studio 2012 Express
  0.2 Installing DirectX 2010 SDK
  0.3 Installing MozillaBuild

1. Getting the source code
  1.0 One line, explain what source control is
  1.1 One line, explain what Mercurial (hg) is
  1.2 Explaining what mozilla-central is
  1.3 Show opening hg.mozilla.org/mozilla-central in a browser
  1.4 Initiating an hg clone
  1.5 If you have problem getting hg clone to work, get a bundle
  1.6 Looking at the files on disk

2. Building Desktop Firefox from the source code
  2.0 Creating a .mozconfig file (Not necessary but explain it)
  2.1 Running mach build >out.txt 2>&1
  2.2 The first time you run this it will create some needed config in c:\users\<username>\.mozbuild, you can ignore it. Simply re-run.
  2.2 Checking the output of out.txt
  2.3 Running objdir_debug/dist/bin/firefox.exe

3. Making and building changes
  3.0 Make a trivial change to something visible, like a string
  3.1 Explain the difference between incremental and full builds

4. Making a patch
  4.0 Setting up a mercurial patch queue
  4.1 Setting up mercurial.ini info for patch options and author name (or using mach command)
  4.2 Creating a new patch with hg qnew
  4.3 Showing where that patch gets created (.hg/patches)
  4.4 Showing that patch opened, explaining the patch format

5. Working on more than one patch
  5.0 Walkthrough of hg qseries, hg applied, hg qpop, hg qpush

6. Updating source code changes from others into your tree
  6.0 Pop your patch queue hg qpop -a
  6.1 hg pull / hg update
  6.2 Push your patch queue
  6.3 Clobber vs not clobber
  6.4 Using hg pull --rebase
 
7. Getting a patch accepted into mozilla-central and landed
  7.0 Filing a bug
  7.1 Attaching your patch to a bug
  7.2 Requesting review
  7.3 Getting a negative review
  7.4 Getting a positive review
  7.5 Not getting a review you requested

8. Finding things in the tree fast
  8.0 Show dxr.mozilla.org

9. Reviewing a patch
  9.0 What it looks like when you get a review request
  9.1 What you do when you get a review request
  9.2 Importing a patch into your patch queue
  9.3 How to review
  9.4 Giving an r-, reviewee sensitivity and feedback
  9.5 Alternatives to an r-
  9.6 nits
  9.7 Giving an r+

10. The different types of repositories for Firefox
  10.0 Explanation of the different update channels (Nightly, Aurora, Beta, Firefox)
  10.1 Explaination of the release cycle
  10.2 What happens every 6 weeks

12. Explanation of the source tree
  12.0 Look at the source tree and explain which things are where

13. Finding bugs to work on
  13.0 Showing jdm's site
  13.1 Find a component you like to work on

14. Rebasing a bitrotted patch
  14.0 What it looks like when you qpush a patch that has conflics
  14.1 Open a rej file
  14.2 Apply the change to the file

15. Viewing history
  15.0 Viewing hg annotate
  15.1Finding regression ranges

16. Staying up to date on Mozilla happenings
  16.0 Planet mozilla
  16.1 Discussion groups
  16.2 Google news search feed
  16.3 Other resources: 
    https://wiki.mozilla.org/Main_Page
    https://developer.mozilla.org/en-US/
    https://quality.mozilla.org/

17. Running tests
  17.0 Running tests locally
  17.1 Checking if the tree is open
  17.2 Running tests on tinderbox (Including TryChooser syntax)
  17.3 Understanding tinderbox pushlog results
  17.4 Understanding intermittent failures
  17.5 Re-running failed tests when you aren't sure
  17.6 Getting the build from tests, take link from
  https://tbpl.mozilla.org/?tree=Try&rev=c6b67e2a81b2 and  go here
  http://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/ and search for c6b67e2a81b2

18. Debugging in Visual studio
  18.0 Setting up your project for debugging
  18.1 Attaching to an already running program to debug it
  18.2 Setting breakpoints
  18.3 Watch window
  18.4 Callstack
  18.5 Build symbols server for release builds

19. More advanced debugging in Visual studio
  19.0 Conditional breakpoints
  19.1 Hit count
  19.2 Memory change breakpoints

20. Getting commit access
  20.0 File for level 1 access - try server
  20.1 ssh-keygen to generate keys for commit access, it is part of the mozilla-build package.
